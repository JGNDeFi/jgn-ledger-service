buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.0'
        corda_gradle_plugins_version = '4.0.42'
        junit_version = '4.12'
        quasar_version = '0.7.10'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.0.2.RELEASE'
        slf4j_version = '1.7.25'
        log4j_version = '2.11.2'
        corda_platform_version = '4'
        kotlin_version = '1.3.31'
        accounts_version = '1.0-SNAPSHOT'
        token_sdk_version = '1.0-SNAPSHOT'
        dokka_version = '0.10.0'
    }

    repositories {
        mavenLocal()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://repo.maven.apache.org/maven2' }      
        maven { url 'https://dl.bintray.com/kotlin/dokka' }  
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.31" apply false
    id "net.corda.plugins.cordapp" version "4.0.44" apply false
    id 'net.corda.plugins.cordformation' version "4.0.44" apply false
    id 'net.corda.plugins.quasar-utils' version "4.0.44" apply false
    id 'org.jetbrains.dokka' version '0.10.0'
}

dokka {
    outputFormat = 'html'   
    outputDirectory = "$buildDir/../docs"

    subProjects = ["clients", "workflows", "contracts"]
    configuration {
        // This is a list of platform names that will be shown in the final result. See the "Platforms" section of this readme
        targets = ["JVM"]  

        // Platform used for code analysis. See the "Platforms" section of this readme
        platform = "JVM"  
    }
}

allprojects {
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: 'net.corda.plugins.cordapp'
    apply plugin: 'net.corda.plugins.cordformation'
    apply plugin: 'jacoco'
    //apply plugin: 'net.corda.plugins.quasar-utils'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenLocal()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://repo.maven.apache.org/maven2' }        
        mavenCentral()
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-dev' }
        maven { url 'https://jitpack.io' }
        maven { url 'https://dl.bintray.com/kotlin/dokka' }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = "1.2"
            apiVersion = "1.2"
            jvmTarget = "1.8"
            javaParameters = true   // Useful for reflection.
        }
    }

    jar {
        // This makes the JAR's SHA-256 hash repeatable.
        exclude "**/log4j2*.xml"
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }
}

apply plugin: 'net.corda.plugins.quasar-utils'

subprojects {
    apply plugin: 'net.corda.plugins.quasar-utils'
}

sourceSets {
    main {
        resources {
            srcDir rootProject.file("config/dev")
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Corda dependencies.
    cordaCompile "$corda_release_group:corda-core:$corda_release_version"
    cordaCompile "$corda_release_group:corda-node-api:$corda_release_version"
    cordaRuntime "$corda_release_group:corda:$corda_release_version"

    // CorDapp dependencies.
    cordapp group: "com.r3.accounts-sdk", name: "flows", version: "$accounts_version", changing: true
    cordapp group: "com.r3.accounts-sdk", name: "states-and-contracts", version: "$accounts_version", changing: true

    cordapp project(":workflows")
    cordapp project(":contracts")

    // For logging.
    testCompile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_version}"
    testCompile "org.apache.logging.log4j:log4j-web:${log4j_version}"

    // Token SDK dependencies.
    //cordapp "com.r3.corda.sdk.token:token-sdk-workflow:$token_sdk_version"
    //cordapp "com.r3.corda.sdk.token:token-sdk-contract:$token_sdk_version"
    //cordapp "com.r3.corda.sdk.token.modules:token-sdk-money:$token_sdk_version"
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapps = [
                "com.r3.accounts-sdk:flows:$accounts_version",
                "com.r3.accounts-sdk:states-and-contracts:$accounts_version"
                //"com.r3.corda.sdk.token:token-sdk-workflow:$token_sdk_version",
                //"com.r3.corda.sdk.token:token-sdk-contract:$token_sdk_version",
                //"com.r3.corda.sdk.token.modules:token-sdk-money:$token_sdk_version",
        ]
        cordapp project(':contracts')
        cordapp project(':workflows')
        rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating : false]
        p2pPort 10002
        rpcSettings {
            address("localhost:10003")
            adminAddress("localhost:10043")
        }
    }
    node {
        name "O=JGN,L=Toronto,C=CA"
        p2pPort 10005
        rpcSettings {
            address("localhost:10006")
            adminAddress("localhost:10046")
        }
        //rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=APPLE,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address("localhost:10009")
            adminAddress("localhost:10049")
        }
        //rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
    node {
        name "O=TRUSTEE,L=Paris,C=FR"
        p2pPort 10011
        rpcSettings {
            address("localhost:10012")
            adminAddress("localhost:10052")
        }
        //rpcUsers = [[ user: "user1", "password": "test", "permissions": ["ALL"]]]
    }
}


task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        xml{ 
            destination file("${buildDir}/reports/jacoco/report.xml")
        }
        html.enabled false
        csv.enabled false
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}